{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nclass CategoryService {\n  constructor(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n  }\n  getAllCategories(query, sortBy, sortDirection, pageNumber, pageSize) {\n    let params = new HttpParams();\n    if (query) {\n      params = params.set('query', query);\n    }\n    if (sortBy) {\n      params = params.set('sortBy', sortBy);\n    }\n    if (sortDirection) {\n      params = params.set('sortDirection', sortDirection);\n    }\n    if (pageNumber) {\n      params = params.set('sortDirection', pageNumber);\n    }\n    if (pageSize) {\n      params = params.set('sortDirection', pageSize);\n    }\n    return this.http.get(`${environment.apiBaseUrl}/api/categories`, {\n      params: params\n    });\n  }\n  getCategoryById(id) {\n    return this.http.get(`${environment.apiBaseUrl}/api/categories/${id}`);\n  }\n  getCategoryCount() {\n    return this.http.get(`${environment.apiBaseUrl}/api/categories/count`);\n  }\n  addCategory(model) {\n    return this.http.post(`${environment.apiBaseUrl}/api/categories?addAuth=true`, model);\n  }\n  updateCategory(id, updateCategoryRequest) {\n    return this.http.put(`${environment.apiBaseUrl}/api/categories/${id}?addAuth=true`, updateCategoryRequest);\n  }\n  deleteCategory(id) {\n    return this.http.delete(`${environment.apiBaseUrl}/api/categories/${id}?addAuth=true`);\n  }\n  static #_ = this.ɵfac = function CategoryService_Factory(t) {\n    return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CategoryService,\n    factory: CategoryService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { CategoryService };","map":{"version":3,"names":["HttpParams","environment","CategoryService","constructor","http","cookieService","getAllCategories","query","sortBy","sortDirection","pageNumber","pageSize","params","set","get","apiBaseUrl","getCategoryById","id","getCategoryCount","addCategory","model","post","updateCategory","updateCategoryRequest","put","deleteCategory","delete","_","i0","ɵɵinject","i1","HttpClient","i2","CookieService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\kevink\\projects\\udemy\\CodePulse\\UI\\codepulse\\src\\app\\features\\category\\services\\category.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AddCategoryRequest } from '../models/add-category-request.model';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Category } from '../models/category.model';\r\nimport { environment } from 'src/environments/environment';\r\nimport { UpdateCategoryRequest } from '../models/update-category-request.model';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoryService {\r\n\r\n  constructor(private http: HttpClient,\r\n    private cookieService: CookieService\r\n  ) { }\r\n\r\n  getAllCategories(\r\n    query?: string, sortBy?: string, sortDirection?: string, pageNumber?: number, pageSize?: number): Observable<Category[]> {\r\n    let params = new HttpParams();\r\n\r\n    if (query) {\r\n      params = params.set('query', query)\r\n    }\r\n\r\n    if (sortBy) {\r\n      params = params.set('sortBy', sortBy)\r\n    }\r\n\r\n    if (sortDirection) {\r\n      params = params.set('sortDirection', sortDirection)\r\n    }\r\n\r\n    if (pageNumber) {\r\n      params = params.set('sortDirection', pageNumber)\r\n    }\r\n\r\n    if (pageSize) {\r\n      params = params.set('sortDirection', pageSize)\r\n    }\r\n\r\n\r\n    return this.http.get<Category[]>(`${environment.apiBaseUrl}/api/categories`, {\r\n      params: params\r\n    });\r\n  }\r\n\r\n  getCategoryById(id: string): Observable<Category> {\r\n    return this.http.get<Category> (`${environment.apiBaseUrl}/api/categories/${id}`)\r\n  }\r\n\r\n  getCategoryCount(): Observable<number> {\r\n    return this.http.get<number> (`${environment.apiBaseUrl}/api/categories/count`)\r\n  }\r\n\r\n  addCategory(model: AddCategoryRequest): Observable<void> {\r\n    return this.http.post<void>(`${environment.apiBaseUrl}/api/categories?addAuth=true`, model)\r\n  }\r\n\r\n  updateCategory(id: string, updateCategoryRequest: UpdateCategoryRequest) : Observable<Category> {\r\n    return this.http.put<Category>(`${environment.apiBaseUrl}/api/categories/${id}?addAuth=true`, updateCategoryRequest);\r\n  }\r\n\r\n  deleteCategory(id: string) : Observable<Category> {\r\n    return this.http.delete<Category>(`${environment.apiBaseUrl}/api/categories/${id}?addAuth=true`)\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,WAAW,QAAQ,8BAA8B;;;;AAI1D,MAGaC,eAAe;EAE1BC,YAAoBC,IAAgB,EAC1BC,aAA4B;IADlB,KAAAD,IAAI,GAAJA,IAAI;IACd,KAAAC,aAAa,GAAbA,aAAa;EACnB;EAEJC,gBAAgBA,CACdC,KAAc,EAAEC,MAAe,EAAEC,aAAsB,EAAEC,UAAmB,EAAEC,QAAiB;IAC/F,IAAIC,MAAM,GAAG,IAAIZ,UAAU,EAAE;IAE7B,IAAIO,KAAK,EAAE;MACTK,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,OAAO,EAAEN,KAAK,CAAC;;IAGrC,IAAIC,MAAM,EAAE;MACVI,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEL,MAAM,CAAC;;IAGvC,IAAIC,aAAa,EAAE;MACjBG,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,eAAe,EAAEJ,aAAa,CAAC;;IAGrD,IAAIC,UAAU,EAAE;MACdE,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,eAAe,EAAEH,UAAU,CAAC;;IAGlD,IAAIC,QAAQ,EAAE;MACZC,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,eAAe,EAAEF,QAAQ,CAAC;;IAIhD,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAa,GAAGb,WAAW,CAACc,UAAU,iBAAiB,EAAE;MAC3EH,MAAM,EAAEA;KACT,CAAC;EACJ;EAEAI,eAAeA,CAACC,EAAU;IACxB,OAAO,IAAI,CAACb,IAAI,CAACU,GAAG,CAAY,GAAGb,WAAW,CAACc,UAAU,mBAAmBE,EAAE,EAAE,CAAC;EACnF;EAEAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAAU,GAAGb,WAAW,CAACc,UAAU,uBAAuB,CAAC;EACjF;EAEAI,WAAWA,CAACC,KAAyB;IACnC,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAO,GAAGpB,WAAW,CAACc,UAAU,8BAA8B,EAAEK,KAAK,CAAC;EAC7F;EAEAE,cAAcA,CAACL,EAAU,EAAEM,qBAA4C;IACrE,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAW,GAAGvB,WAAW,CAACc,UAAU,mBAAmBE,EAAE,eAAe,EAAEM,qBAAqB,CAAC;EACtH;EAEAE,cAAcA,CAACR,EAAU;IACvB,OAAO,IAAI,CAACb,IAAI,CAACsB,MAAM,CAAW,GAAGzB,WAAW,CAACc,UAAU,mBAAmBE,EAAE,eAAe,CAAC;EAClG;EAAC,QAAAU,CAAA,G;qBAtDUzB,eAAe,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfhC,eAAe;IAAAiC,OAAA,EAAfjC,eAAe,CAAAkC,IAAA;IAAAC,UAAA,EAFd;EAAM;;SAEPnC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}